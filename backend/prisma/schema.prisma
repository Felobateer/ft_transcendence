// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  /// basic info
  id        			    String  @id @unique @default(uuid())
  createdAt 			    DateTime @default(now())
  email     			    String  @unique
  userName  			    String  @unique
  avatar    		  	  String  @default("defaultAvatar.jpg")
  isFourtyTwoStudent  Boolean @default(false)
  role      		  	  Role    @default(USER)
  status    		 	    Status  @default(ONLINE)

  /// authentification
  password 	      String
  twoFAActivated  Boolean @default(false)
  twoFASecret     String?

  /// community
  friends     			    String[]
  frienRequestsSent 	  String[]
  friendReqestsReceived	String[]
  rooms       			    RoomUser[]	@relation("userRoom")

  /// statistics
  gamesWon    	Int?
  gamesLost   	Int?
  ranking       Int?
  level         Int?
  achievements  String[]

  ///historics
  // we can either use winner/loser or just games, tbd
  games   Game[]  @relation("player")
  winner  Game[]  @relation("winner")
  loser   Game[]  @relation("loser")
}

model jwtBlacklist {
  id     Int       @id @default(autoincrement())
  userID String	   @unique @default(uuid())
  token  String    @unique
}

model Game {
  gameId      Int       @id @default(autoincrement())
  players     User[]    @relation("player")
  winnerId    String
  winner      User?     @relation("winner", fields: [winnerId], references: [id])
  loserId     String
  loser       User?     @relation("loser", fields: [loserId], references: [id]) 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Room {
  id        String   			@id @unique @default(uuid())
  createdAt DateTime  		@default(now())
  messages  Message[]			@relation("message")
  users     RoomUser[]		@relation("roomUser")
}

model RoomUser {
	id				String		@id @unique @default(uuid())
	user			User			@relation("userRoom", fields: [roomID], references: [id])
	userID		String
	room			Room			@relation("roomUser", fields: [userID], references: [id])
	roomID		String
}

model Message {
  id          Int       @id @default(autoincrement())
  text        String
  sendtime    DateTime  @default(now())
  sender    	String		// this is the username
  room        Room      @relation("message", fields: [roomID], references: [id])
  roomID      String
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ONLINE
	AWAY
  OFFLINE
  PLAYING
	WAITING
}
